#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('google-speech-to-text-node-01:server');
var http = require('http');
//var http = require('../routes/module/mod_socket');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
var io = require('socket.io').listen(server);
//作成したサーバーにWebsocketの接続を追加
//接続確立時の処理
// var ctx = new AudioContext();

// Imports the Google Cloud client library
const speech = require('@google-cloud/speech');
// Creates a client
const projectId = 'speech-api-01';
const keyFilename = 'keys/Speech-api-01-bb7932254e09.json';
const client = new speech.SpeechClient({
  projectId: projectId,
  keyFilename: keyFilename
});

// const encoding = 'Encoding of the audio file, e.g. LINEAR16';
// const sampleRateHertz = 16000;
// const languageCode = 'BCP-47 language code, e.g. en-US';
const request = {
  config: {
    encoding: 'LINEAR16',
    sampleRateHertz: '16000',
    languageCode: 'ja_JP'
  },
  interimResults: true, // If you want interim results, set this to true
};

io.sockets.on('connection', function (socket) {
  console.log('connected');
  socket.on('message', function(d){
      console.log('message');
      // そのまま全接続先へ送信
      io.emit('receiveMessage', d);
    });
  socket.on('audio', function(buffer){
      // console.log('audio');

      // マイクの音声データを受信
      // バッファはFloat32
      // var f32Audio = new Float32Array(buffer);

      // TODO　GoogleSpeechAPIにデータを送信する
      // const encoding = 'Encoding of the audio file, e.g. LINEAR16';
      // const sampleRateHertz = 16000;
      // const languageCode = 'BCP-47 language code, e.g. en-US';
      // var data = require('../module/recognize').streamingMicRecognize('LINEAR16', '16000', 'ja_JP');

      // console.log('start streamingMicRecognize');
      // const record = require('node-record-lpcm16');

      // // Imports the Google Cloud client library
      // const speech = require('@google-cloud/speech');
      // // Creates a client
      // const projectId = 'speech-api-01';
      // const keyFilename = 'keys/Speech-api-01-bb7932254e09.json';
      // const client = new speech.SpeechClient({
      //   projectId: projectId,
      //   keyFilename: keyFilename
      // });
      //
      // // const encoding = 'Encoding of the audio file, e.g. LINEAR16';
      // // const sampleRateHertz = 16000;
      // // const languageCode = 'BCP-47 language code, e.g. en-US';
      // const request = {
      //   config: {
      //     encoding: 'LINEAR16',
      //     sampleRateHertz: '16000',
      //     languageCode: 'ja_JP'
      //   },
      //   interimResults: true, // If you want interim results, set this to true
      // };

      // console.log(buffer.byteLength);

      // Create a recognize stream
      const recognizeStream = client
        .streamingRecognize(request)
        .on('error', console.error)
        .on('data', data => {
          console.log('recognizeStream data');
          io.emit('receiveTranscribedMessage', data);
      });

      //GoogleSpeechAPIの戻り値をクライアントへ送信
      const readStream = new require('stream').PassThrough();
      readStream.end( buffer );
      readStream.pipe( recognizeStream );
    });

});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
